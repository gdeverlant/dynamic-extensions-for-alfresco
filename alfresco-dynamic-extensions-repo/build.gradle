subprojects {
    group "eu.xenit"

    configurations {
        ampArtifact
        ampLib
        compileOnly.extendsFrom(ampLib)
        testCompile.extendsFrom(compileOnly)
        blueprint
        bundles
    }

    dependencies {
        compileOnly "${project.ext.alfrescoBom}"

        ampLib(project(":alfresco-integration:alfresco-integration-${project.ext.simpleAlfrescoVersion}")) {
            transitive = false
        }
        ampLib(project(':annotations')) { transitive = false }
        ampLib(project(":annotations-runtime:annotations-runtime-${project.ext.simpleAlfrescoVersion}")) {
            transitive = false
        }
        ampLib(project(":annotations-runtime-schedule")) { transitive = false }
        ampLib(project(":annotations-runtime-schedule:scheduler-quartz-1")) { transitive = false }
        ampLib(project(":annotations-runtime-schedule:scheduler-quartz-2")) { transitive = false }

        ampLib(project(":webscripts")) { transitive = false }

        ampLib("org.apache.felix:org.apache.felix.framework:${project.ext.felixVersion}") { transitive = false }
        ampLib "com.springsource.util:com.springsource.util.osgi:${project.ext.springOsgiUtilVersion}"
        // The core asm library is already included in Alfresco distributions, so we just add asm-commons.
        ampLib("asm:asm-commons:3.1") { transitive = false }

        ampLib "org.jetbrains:annotations:$jetbrains_annotations_version"

        ampLib "biz.aQute.bnd:biz.aQute.bnd:${project.ext.bndVersion}"

        blueprint(project(path: ":blueprint-override:blueprint-override-${project.ext.simpleAlfrescoVersion}", configuration: 'patch')) {
            transitive = false
        }
        blueprint(project(":blueprint-integration:blueprint-integration-${project.ext.simpleAlfrescoVersion}")) {
            transitive = false
        }
        blueprint("org.eclipse.gemini.blueprint:gemini-blueprint-core:${project.ext.geminiVersion}") {
            transitive = false
        }
        blueprint("org.eclipse.gemini.blueprint:gemini-blueprint-io:${project.ext.geminiVersion}") {
            transitive = false
        }

        bundles "org.slf4j:slf4j-api:${project.slf4jVersion}"
        bundles("org.slf4j:slf4j-log4j12:${project.slf4jVersion}") { transitive = false }
        bundles(project(":control-panel:control-panel-${project.ext.simpleAlfrescoVersion}")) { transitive = false }
        bundles(project(":event-bus")) { transitive = false }
        bundles 'org.apache.felix:org.apache.felix.log:1.0.1'

        testCompile "junit:junit:${project.ext.junitVersion}"
        testCompile "org.mockito:mockito-core:${project.ext.mockitoVersion}"

        testCompile "org.springframework:spring-test"
        testCompile "org.springframework:spring-web"
        testCompile("org.alfresco.surf:spring-webscripts")
        testCompile("org.alfresco:alfresco-repository") { transitive = false }
        testCompile("org.alfresco:alfresco-data-model") { transitive = false }

        testRuntime "org.springframework:spring-beans"
    }

    def ampConfig = {
        from(configurations.blueprint) {
            into("config/alfresco/module/$project.parent.name/blueprint-bundles/")
        }

        from(configurations.bundles) {
            into("config/alfresco/module/$project.parent.name/standard-bundles")
        }

        from(configurations.ampLib) {
            into("lib")
        }

        from("${project.projectDir}/module.properties") {
            expand(project.properties)
        }

        from("${project.parent.projectDir}/shared/src/main/resources") {
            into("config")
        }

        from("${project.parent.projectDir}/shared/src/main/config") {
            into("config/alfresco/module/$project.parent.name")
        }

        extension "amp"
        destinationDir = file("$buildDir/amps")
    }

    task amp(type: Zip, dependsOn: jar) {
        configure ampConfig
        baseName = project.name
    }

    artifacts {
        ampArtifact amp
    }

    build.dependsOn("amp")
}
