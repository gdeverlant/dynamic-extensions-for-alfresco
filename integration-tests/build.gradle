plugins {
    id "eu.xenit.docker-alfresco" version "4.0.2" apply false
}

apply plugin: 'java'

ext {
    slf4jVersion = '1.7.25'
}

dependencies {
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'junit:junit:4.12'
    testCompile 'io.rest-assured:rest-assured:3.0.7'

    testCompile group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
    testCompile group: 'org.slf4j', name: 'slf4j-simple', version: "${slf4jVersion}"
}

// Tests should be executed in child projects, not in this project:
test.enabled = false

configure(subprojects.findAll { it.name.startsWith("alfresco-") }) {

    apply plugin: 'java'

    def alfrescoVersion = project.name - 'alfresco-'

    if (new File("${project.projectDir}/overload.gradle").exists())
        apply from: "${project.projectDir}/overload.gradle"

    task integrationTest(type: Test) {
        testClassesDirs = project.parent.sourceSets.test.output.classesDirs
        classpath = project.parent.sourceSets.test.runtimeClasspath
        outputs.upToDateWhen { false }

        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }

    apply plugin: 'eu.xenit.docker-alfresco'
    
    dependencies {
        baseAlfrescoWar "${alfrescoBaseWar}"
        alfrescoAmp project(path: ":alfresco-dynamic-extensions-repo:alfresco-dynamic-extensions-repo-${alfrescoVersion}", configuration: 'ampArtifact')
        
        baseShareWar "${shareBaseWar}"
    }
    
    dockerAlfresco {
        baseImage = "${alfrescoBaseImage}"
        
        leanImage = true
        
        dockerBuild {
            automaticTags = false
        }
    }
    
    createDockerFile {
        runCommand("sed -i 's|<secure>true</secure>|<secure>false</secure>|g' /usr/local/tomcat/conf/web.xml")
    }

    dockerCompose {
        projectName = "alfresco-dynamic-extensions-${project.name}"
        useComposeFiles = [project.parent.projectDir.toString() + '/src/test/compose/docker-compose.yml']

        removeVolumes = true
        captureContainersOutput = true

        // Uncomment for quick iterations when developing integration tests
//        stopContainers = false

        // expose alfresco/inflow on a random port, comment to use default port (8080)
        environment.put 'COMPOSE_ALFRESCO_TCP_8080', '8080'
        environment.put 'POSTGRES_IMAGE', "${project.ext.postgresImage}"

        isRequiredBy(project.tasks.integrationTest)
    }
}
