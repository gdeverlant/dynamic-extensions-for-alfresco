import eu.xenit.dynamicextensionsalfresco.Versions

buildscript {
    ext.jetbrains_annotations_version = '17.0.0'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.8.0"
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = '4.10.2'
}

apply plugin: 'io.codearte.nexus-staging'

nexusStaging {
    username = project.hasProperty('de_publish_username') ? project.de_publish_username : ''
    password = project.hasProperty('de_publish_password') ? project.de_publish_password : ''
    packageGroup = "eu.xenit"
}

allprojects {
    group = 'eu.xenit.de'
    version = '2.0.0-SNAPSHOT'

    apply plugin: 'idea'
    apply plugin: 'eclipse'

    repositories {
        maven {
            url "${rootProject.projectDir}/alfresco-bom-repo"
        }
        mavenCentral()
        maven {
            url "https://artifacts.alfresco.com/nexus/content/groups/public/"
        }
        jcenter()
        maven {
            url "http://repository.springsource.com/maven/bundles/release"
        }
        maven {
            url "http://repository.springsource.com/maven/bundles/external"
        }
    }
}

// Configuration that should be applied to all subprojects. (If a sub project also has sub projects for different 
// Alfresco versions, it should not build any artifacts.)
def allSubProjectsConfig = {

//    println "allSubProjectsConfig for project ${project.name}"

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
    }

    signing {
        required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask("publish") }
        sign configurations.archives
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourceJar
                artifact javadocJar

                afterEvaluate {
                    if (!project.getTasksByName('amp', false).isEmpty()) {
                        artifact amp
                    }
                }

                pom {
                    url = 'https://github.com/xenit-eu/dynamic-extensions-for-alfresco'
                    name = "dynamic-extensions-for-alfresco-" + project.name
                    description = "Adds an OSGi container to alfresco repository supporting dynamic code reloading, " +
                            "classpath isolation and a bunch of other useful features"

                    scm {
                        connection = 'scm:git:git@github.com:xenit-eu/dynamic-extensions-for-alfresco.git'
                        developerConnection = 'scm:git:git@github.com:xenit-eu/dynamic-extensions-for-alfresco.git'
                        url = 'https://github.com/xenit-eu/dynamic-extensions-for-alfresco.git'
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username = project.hasProperty('de_publish_username') ? project.de_publish_username : ''
                    password = project.hasProperty('de_publish_password') ? project.de_publish_password : ''
                }
            }
        }
    }

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    tasks.withType(JavaCompile) {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8

        options.encoding = "UTF-8"
        options.compilerArgs << '-Xlint:unchecked'
    }

    ext {
        simpleAlfrescoVersion = Versions.getSimpleAlfrescoVersionFromProjectName(project.name)
        alfrescoVersion = Versions.alfrescoVersions.get(simpleAlfrescoVersion)
        springVersion = Versions.springVersions.get(simpleAlfrescoVersion)

        alfrescoBom = "eu.xenit.alfresco:alfresco-${Versions.alfrescoEdition}-bom:${alfrescoVersion}"

        // '3.0.0.M01' for Alfresco 6.0
        // '1.0.2.RELEASE' for Alfresco 5.x
        geminiVersion = Versions.geminiVersions.get(simpleAlfrescoVersion)

        osgiVersion = '4.3.1'
        felixVersion = '6.0.2'

        slf4jVersion = '1.7.7'
        junitVersion = '4.12'

        springOsgiUtilVersion = '2.0.5.RELEASE'
        mockitoVersion = '1.10.19'
        jibxVersion = '1.2.3'
        hibernateVersion = '3.2.6.ga'
        servletVersion = '2.5'
        bndVersion = '2.4.1'
    }

    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(publish)) {
            if (!project.hasProperty('keyId') || !project.hasProperty('secretKeyRingFile') || !project.hasProperty('password')) {
                throw new GradleException('You need to provide signing params in order to sign artifacts')
            }

            def id = project.hasProperty('keyId') ? project.keyId : ''
            def file = project.hasProperty('secretKeyRingFile') ? project.secretKeyRingFile : ''
            def password = project.hasProperty('password') ? project.password : ''

            ext."signing.keyId" = id
            ext."signing.secretKeyRingFile" = file
            ext."signing.password" = password
        }
    }
}

configure((
        subprojects.findAll { it.parent.name == it.rootProject.name } // Only configure first level child projects
                - project(':gradle-plugin')
                - project(':annotations')
                - project(':webscripts')
                - project(':integration-tests')
                - project(':event-bus')
                - project(':alfresco-integration')
                - project(':blueprint-integration')
                - project(':blueprint-override')
                - project(':control-panel')), {
    subprojects allSubProjectsConfig
})
configure(
        [
                project(':gradle-plugin'),
                project(':annotations'),
                project(':annotations-runtime'),
                project(':webscripts'),
                project(':event-bus'),
                project(':alfresco-integration'),
                project(':blueprint-integration'),
                project(':blueprint-override'),
                project(':control-panel')],
        allSubProjectsConfig)

defaultTasks 'build'

ext.versionFile = "${project.buildDir}/version"

task makeVersionFile {
    group "build"
    description "Make a file containing the version"
    outputs.file versionFile

    doLast {
        file(versionFile).write version
        println "Version ${version}"
    }
}

allprojects {
    configurations.all {
        exclude group: 'jaxen'
        resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->
                if (details.requested.group == 'org.springframework'
                        && project.ext.has('springVersion')) {
                    details.useVersion project.ext.springVersion
                }

                if (details.requested.group == 'org.alfresco.surf') {
                    if (project.alfrescoVersion.startsWith('5.0')) {
                        details.useTarget group: 'org.springframework.extensions.surf',
                                name: details.requested.name,
                                version: project.alfrescoVersion
                        details.because "'org.springframework.extensions.surf' was moved to 'org.alfresco.surf'"
                    }
                }

                // Eclipse Gemini Blueprint 1.0.2.RELEASE was published as 'org.eclipse.gemini' and is
                // the last version that supports Spring 3.x
                // Starting from 2.0 the modules were moved to 'org.eclipse.gemini.blueprint' and artifacts
                // were renamed.
                if (details.requested.group == 'org.eclipse.gemini.blueprint'
                        && details.requested.version.startsWith('1.0')) {
                    if (details.requested.name == 'gemini-blueprint-extender') {
                        details.useTarget group: 'org.eclipse.gemini',
                                name: 'org.eclipse.gemini.blueprint.extender',
                                version: details.requested.version
                    } else if (details.requested.name == 'gemini-blueprint-core') {
                        details.useTarget group: 'org.eclipse.gemini',
                                name: 'org.eclipse.gemini.blueprint.core',
                                version: details.requested.version
                    } else if (details.requested.name == 'gemini-blueprint-io') {
                        details.useTarget group: 'org.eclipse.gemini',
                                name: 'org.eclipse.gemini.blueprint.io',
                                version: details.requested.version
                    } else {
                        throw new GradleException("No module substitution mapping found for ${details.requested}")
                    }
                    details.because "'org.eclipse.gemini.blueprint' was 'org.eclipse.gemini' in the 1.x version range"
                }

            }
        }
    }
}